// // Imports
// const { Sequelize, DataTypes } = require("sequelize");
// const config = require("./config.js");
// const db = {
//     Op: Sequelize.Op
// };
// // Create a Sequelize instance
// db.sequelize = new Sequelize(config.DB, config.USER, config.PASSWORD, {
//     host: config.HOST,
//     dialect: config.DIALECT
// });
// // Create schema
// db.user = require("./models/user.js")(db.sequelize, DataTypes);
// db.post = require("./models/post.js")(db.sequelize, DataTypes);
// db.comment = require("./models/comment.js")(db.sequelize, DataTypes);
// // Create Cardinalities among tables
// db.post.belongsTo(db.user, { foreignKey: { name: "username", allowNull: false} });
// db.comment.belongsTo(db.user, { foreignKey: { name: "username", allowNull: false } });
// db.comment.belongsTo(db.post, { foreignKey: { name: "postByUser", allowNull: false }});
// db.sync = async () => {
//     // sync tables
//     await db.sequelize.sync();
//     // add seed data into tables
//     await seedData();
// };
// async function seedData() {     // import seed data into tables
//     const count = await db.user.count();
//     if (count > 0) return;      // if there are some data, don't insert
//     const argon2 = require("argon2");
//     let hashedPassword = await argon2.hash("TestPass123123", { type:argon2.argon2id });
//     await db.user.create({
//         username: "jacky@gmail.com",
//         hashed_password: hashedPassword,
//         first_name: "Jacky",
//         last_name: "Lai"
//     })
//     hashedPassword = await argon2.hash("TestPass321321", { type:argon2.argon2id });
//     await db.user.create({
//         username: "a@a.a",
//         hashed_password: hashedPassword,
//         first_name: "AAA",
//         last_name: "aaa"
//     })
// };
// module.exports = db;
function cov_2617da4yij(){var path="/Users/jackylai/Desktop/fwp_a2/express/testing/test.database/index.js";var hash="6f181b617ec7e2be3f63dc25b7a42e21866603fb";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/jackylai/Desktop/fwp_a2/express/testing/test.database/index.js",statementMap:{},fnMap:{},branchMap:{},s:{},f:{},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"6f181b617ec7e2be3f63dc25b7a42e21866603fb"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2617da4yij=function(){return actualCoverage;};}return actualCoverage;}cov_2617da4yij();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gLy8gSW1wb3J0c1xuLy8gY29uc3QgeyBTZXF1ZWxpemUsIERhdGFUeXBlcyB9ID0gcmVxdWlyZShcInNlcXVlbGl6ZVwiKTtcbi8vIGNvbnN0IGNvbmZpZyA9IHJlcXVpcmUoXCIuL2NvbmZpZy5qc1wiKTtcblxuLy8gY29uc3QgZGIgPSB7XG4vLyAgICAgT3A6IFNlcXVlbGl6ZS5PcFxuLy8gfTtcblxuLy8gLy8gQ3JlYXRlIGEgU2VxdWVsaXplIGluc3RhbmNlXG4vLyBkYi5zZXF1ZWxpemUgPSBuZXcgU2VxdWVsaXplKGNvbmZpZy5EQiwgY29uZmlnLlVTRVIsIGNvbmZpZy5QQVNTV09SRCwge1xuLy8gICAgIGhvc3Q6IGNvbmZpZy5IT1NULFxuLy8gICAgIGRpYWxlY3Q6IGNvbmZpZy5ESUFMRUNUXG4vLyB9KTtcblxuLy8gLy8gQ3JlYXRlIHNjaGVtYVxuLy8gZGIudXNlciA9IHJlcXVpcmUoXCIuL21vZGVscy91c2VyLmpzXCIpKGRiLnNlcXVlbGl6ZSwgRGF0YVR5cGVzKTtcbi8vIGRiLnBvc3QgPSByZXF1aXJlKFwiLi9tb2RlbHMvcG9zdC5qc1wiKShkYi5zZXF1ZWxpemUsIERhdGFUeXBlcyk7XG4vLyBkYi5jb21tZW50ID0gcmVxdWlyZShcIi4vbW9kZWxzL2NvbW1lbnQuanNcIikoZGIuc2VxdWVsaXplLCBEYXRhVHlwZXMpO1xuXG4vLyAvLyBDcmVhdGUgQ2FyZGluYWxpdGllcyBhbW9uZyB0YWJsZXNcbi8vIGRiLnBvc3QuYmVsb25nc1RvKGRiLnVzZXIsIHsgZm9yZWlnbktleTogeyBuYW1lOiBcInVzZXJuYW1lXCIsIGFsbG93TnVsbDogZmFsc2V9IH0pO1xuLy8gZGIuY29tbWVudC5iZWxvbmdzVG8oZGIudXNlciwgeyBmb3JlaWduS2V5OiB7IG5hbWU6IFwidXNlcm5hbWVcIiwgYWxsb3dOdWxsOiBmYWxzZSB9IH0pO1xuLy8gZGIuY29tbWVudC5iZWxvbmdzVG8oZGIucG9zdCwgeyBmb3JlaWduS2V5OiB7IG5hbWU6IFwicG9zdEJ5VXNlclwiLCBhbGxvd051bGw6IGZhbHNlIH19KTtcblxuLy8gZGIuc3luYyA9IGFzeW5jICgpID0+IHtcbi8vICAgICAvLyBzeW5jIHRhYmxlc1xuLy8gICAgIGF3YWl0IGRiLnNlcXVlbGl6ZS5zeW5jKCk7XG4vLyAgICAgLy8gYWRkIHNlZWQgZGF0YSBpbnRvIHRhYmxlc1xuLy8gICAgIGF3YWl0IHNlZWREYXRhKCk7XG4vLyB9O1xuXG4vLyBhc3luYyBmdW5jdGlvbiBzZWVkRGF0YSgpIHsgICAgIC8vIGltcG9ydCBzZWVkIGRhdGEgaW50byB0YWJsZXNcbi8vICAgICBjb25zdCBjb3VudCA9IGF3YWl0IGRiLnVzZXIuY291bnQoKTtcbi8vICAgICBpZiAoY291bnQgPiAwKSByZXR1cm47ICAgICAgLy8gaWYgdGhlcmUgYXJlIHNvbWUgZGF0YSwgZG9uJ3QgaW5zZXJ0XG5cbi8vICAgICBjb25zdCBhcmdvbjIgPSByZXF1aXJlKFwiYXJnb24yXCIpO1xuXG4vLyAgICAgbGV0IGhhc2hlZFBhc3N3b3JkID0gYXdhaXQgYXJnb24yLmhhc2goXCJUZXN0UGFzczEyMzEyM1wiLCB7IHR5cGU6YXJnb24yLmFyZ29uMmlkIH0pO1xuLy8gICAgIGF3YWl0IGRiLnVzZXIuY3JlYXRlKHtcbi8vICAgICAgICAgdXNlcm5hbWU6IFwiamFja3lAZ21haWwuY29tXCIsXG4vLyAgICAgICAgIGhhc2hlZF9wYXNzd29yZDogaGFzaGVkUGFzc3dvcmQsXG4vLyAgICAgICAgIGZpcnN0X25hbWU6IFwiSmFja3lcIixcbi8vICAgICAgICAgbGFzdF9uYW1lOiBcIkxhaVwiXG4vLyAgICAgfSlcbi8vICAgICBoYXNoZWRQYXNzd29yZCA9IGF3YWl0IGFyZ29uMi5oYXNoKFwiVGVzdFBhc3MzMjEzMjFcIiwgeyB0eXBlOmFyZ29uMi5hcmdvbjJpZCB9KTtcbi8vICAgICBhd2FpdCBkYi51c2VyLmNyZWF0ZSh7XG4vLyAgICAgICAgIHVzZXJuYW1lOiBcImFAYS5hXCIsXG4vLyAgICAgICAgIGhhc2hlZF9wYXNzd29yZDogaGFzaGVkUGFzc3dvcmQsXG4vLyAgICAgICAgIGZpcnN0X25hbWU6IFwiQUFBXCIsXG4vLyAgICAgICAgIGxhc3RfbmFtZTogXCJhYWFcIlxuLy8gICAgIH0pXG4vLyB9O1xuXG4vLyBtb2R1bGUuZXhwb3J0cyA9IGRiOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUEsMG5CQXRDWTtBQUFBIn0=